{"version":3,"sources":["accets/Button/Button.module.css","accets/Input/Input.module.css","accets/Link/Link.module.css","ui/navbar/NavBar.module.css","accets/Button/Button.tsx","accets/Input/Input.tsx","accets/Link/Link.tsx","bll/reducers/signInReducer.ts","bll/reducers/NekoReducer.ts","bll/reducers/PasswordForgotReducer.ts","bll/reducers/RegistrationReducer.ts","bll/reducers/SetNewPasswordReducer.ts","bll/store.ts","ui/navbar/NavBar.tsx","ui/content/SignIn.tsx","ui/content/Registration.tsx","ui/content/PasswordForgot.tsx","ui/content/SetNewPassword.tsx","ui/content/Neko.tsx","ui/Content.tsx","ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","title","Input","type","id","placeholder","input","Link","href","link","initialState","SignInReducer","state","NekoReducer","PasswordForgotReducer","RegistrationReducer","SetNewPasswordReducer","rootReducer","combineReducers","singIn","registration","passwordForgot","setNewPassword","neko","store","createStore","applyMiddleware","thunkMiddleware","NavBar","navMenu","to","SignIn","Registration","PasswordForgot","SetNewPassword","Neko","Content","path","render","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47bb358e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__f-hg_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1DaxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Link_active__M_WUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navMenu\":\"NavBar_navMenu__2GZBF\"};","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport s from './Button.module.css'\r\n\r\nconst Button = (props: any) => {\r\n    return (\r\n        <>\r\n            <button className={s.button}>{props.title}</button>\r\n        </>\r\n    )\r\n}\r\nexport default Button\r\n","import React from 'react'\r\nimport s from './Input.module.css'\r\n\r\nconst Input = (props: any) => {\r\n    return (\r\n        <div>\r\n            <input type={props.type} id=\"dynamic-label-input\" placeholder={props.placeholder} className={s.input}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Input\r\n","import React from \"react\";\r\nimport s from \"./Link.module.css\"\r\n\r\ntype PropsType = {\r\n    title:string\r\n}\r\nconst Link = (props:PropsType) => {\r\n    return(\r\n        <div><a href='#' className={s.link}>{props.title}</a></div>\r\n    )\r\n}\r\nexport default Link\r\n","const initialState = {\r\n\r\n}\r\nconst SignInReducer = (state = initialState, action:any) => {\r\n        return state\r\n}\r\nexport default SignInReducer\r\n","const initialState = {\r\n\r\n}\r\nconst NekoReducer = (state = initialState, action:any) => {\r\n        return state\r\n}\r\nexport default NekoReducer\r\n","const initialState = {\r\n\r\n}\r\nconst PasswordForgotReducer = (state = initialState, action:any) => {\r\n        return state\r\n}\r\nexport default PasswordForgotReducer\r\n","const initialState = {\r\n\r\n}\r\nconst RegistrationReducer = (state = initialState, action:any) => {\r\n        return state\r\n}\r\nexport default RegistrationReducer\r\n","const initialState = {\r\n\r\n}\r\nconst SetNewPasswordReducer = (state = initialState, action:any) => {\r\n        return state\r\n}\r\nexport default SetNewPasswordReducer\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport reducer from \"./reducers/signInReducer\";\r\nimport SignInReducer from \"./reducers/signInReducer\";\r\nimport NekoReducer from \"./reducers/NekoReducer\";\r\nimport PasswordForgotReducer from \"./reducers/PasswordForgotReducer\";\r\nimport RegistrationReducer from \"./reducers/RegistrationReducer\";\r\nimport SetNewPasswordReducer from \"./reducers/SetNewPasswordReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    singIn: SignInReducer,\r\n    registration: RegistrationReducer,\r\n    passwordForgot: PasswordForgotReducer,\r\n    setNewPassword: SetNewPasswordReducer,\r\n    neko: NekoReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport default store\r\n","import React from \"react\";\r\nimport {Link, NavLink} from \"react-router-dom\";\r\nimport s from '../navbar/NavBar.module.css'\r\n\r\nconst NavBar = (props:any) => {\r\n    return(\r\n        <div className={s.navMenu}>\r\n            <NavLink to={'sign-in'}>sign-in</NavLink>\r\n            <NavLink to={'register'}>register</NavLink>\r\n            <NavLink to={'passwordForgot'}>forgot</NavLink>\r\n            <NavLink to={'set-new-pass'}>set new pass</NavLink>\r\n            <NavLink to={'neko'}>neko</NavLink>\r\n            </div>\r\n    )\r\n}\r\nexport default NavBar\r\n","import React from \"react\";\r\n\r\nconst SignIn = (props:any) => {\r\n    debugger\r\n    return(\r\n        <div>SignIn</div>\r\n    )\r\n}\r\nexport default SignIn\r\n","import React from \"react\";\r\n\r\nconst Registration = (props:any) => {\r\n    return(\r\n        <div>Registration</div>\r\n    )\r\n}\r\nexport default Registration\r\n","import React from \"react\";\r\n\r\nconst PasswordForgot = (props:any) => {\r\n    return(\r\n        <div>PasswordForgot</div>\r\n    )\r\n}\r\nexport default PasswordForgot\r\n","import React from \"react\";\r\n\r\nconst SetNewPassword = (props:any) => {\r\n    return(\r\n        <div>SetNewPassword</div>\r\n    )\r\n}\r\nexport default SetNewPassword\r\n","import React from \"react\";\r\n\r\nconst Neko = (props:any) => {\r\n    return(\r\n        <div>Neko</div>\r\n    )\r\n}\r\nexport default Neko\r\n","import React, {useState} from \"react\";\r\nimport { Router, Route } from \"react-router-dom\";\r\nimport SignIn from \"./content/SignIn\";\r\nimport Registration from \"./content/Registration\";\r\nimport PasswordForgot from \"./content/PasswordForgot\";\r\nimport SetNewPassword from \"./content/SetNewPassword\";\r\nimport Neko from \"./content/Neko\";\r\n\r\nconst Content = (props:any) => {\r\n    return(\r\n        <>\r\n            <Route path='/sign-in' render={()=><SignIn/>}/>\r\n            <Route path='/register' render={()=><Registration/>}/>\r\n            <Route path='/passwordForgot' render={()=><PasswordForgot/>}/>\r\n            <Route path='/set-new-pass' render={()=><SetNewPassword/>}/>\r\n            <Route path='/neko' render={()=><Neko/>}/>\r\n        </>\r\n    )\r\n}\r\nexport default Content\r\n","import React from 'react';\nimport './App.css';\nimport Button from \"../accets/Button/Button\";\nimport Input from \"../accets/Input/Input\";\nimport Link from \"../accets/Link/Link\";\nimport Header from \"../accets/Header/Header\";\nimport {BrowserRouter, HashRouter, Route, Switch} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"../bll/store\";\nimport NavBar from \"./navbar/NavBar\";\nimport Content from \"../ui/Content\"\nimport SignIn from \"./content/SignIn\";\n\nfunction App() {\n    return (\n        <HashRouter >\n            <Provider store={store}>\n                <div className=\"App\">\n                    <NavBar/>\n                    <Input type={'text'}/>\n                    <Input type={'password'}/>\n                    <Link title={'forgot password?'}/>\n                    <Button title={'Click'}/>\n                    <Link title={'registration'}/>\n                    <Content/>\n                </div>\n            </Provider>\n        </HashRouter >\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"content is cached for offline use.\" message.\n              console.log('content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n        <React.StrictMode>\n            <App/>\n        </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}